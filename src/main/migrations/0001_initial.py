# Generated by Django 5.0.7 on 2025-04-14 09:36

import datetime
import django.db.models.deletion
import django_extensions.db.fields
import main.blocks.blocks
import main.mixins
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.routable_page.models
import wagtail.embeds.blocks
import wagtail.fields
import wagtail_footnotes.blocks
import wagtail_headless_preview.models
import wagtailmedia.blocks
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("customimage", "0001_initial"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailcore", "0093_uploadedfile"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "point_threshold",
                    models.PositiveIntegerField(
                        help_text="Points required to earn this achievement"
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS class or identifier for the achievement icon",
                        max_length=100,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BasePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "og_title",
                    models.CharField(
                        blank=True,
                        help_text="Falls back to seo title if empty",
                        max_length=40,
                        null=True,
                        verbose_name="Facebook title",
                    ),
                ),
                (
                    "og_description",
                    models.CharField(
                        blank=True,
                        help_text="Falls back to seo description if empty",
                        max_length=300,
                        null=True,
                        verbose_name="Facebook description",
                    ),
                ),
                (
                    "twitter_title",
                    models.CharField(
                        blank=True,
                        help_text="Falls back to facebook title if empty",
                        max_length=40,
                        null=True,
                        verbose_name="Twitter title",
                    ),
                ),
                (
                    "twitter_description",
                    models.CharField(
                        blank=True,
                        help_text="Falls back to facebook description if empty",
                        max_length=300,
                        null=True,
                        verbose_name="Twitter description",
                    ),
                ),
                (
                    "robot_noindex",
                    models.BooleanField(
                        default=False,
                        help_text="Check to add noindex to robots",
                        verbose_name="No index",
                    ),
                ),
                (
                    "robot_nofollow",
                    models.BooleanField(
                        default=False,
                        help_text="Check to add nofollow to robots",
                        verbose_name="No follow",
                    ),
                ),
                (
                    "canonical_link",
                    models.URLField(
                        blank=True, null=True, verbose_name="Canonical link"
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If you want to override the image used on Facebook for                     this item, upload an image here.                     The recommended image size for Facebook is 1200 Ã— 630px",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="customimage.customimage",
                    ),
                ),
                (
                    "twitter_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Falls back to facebook image if empty",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="customimage.customimage",
                        verbose_name="Twitter image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(main.mixins.EnhancedPanelMixin, "wagtailcore.page"),
        ),
        migrations.CreateModel(
            name="Battlefield",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Battlefield",
                "verbose_name_plural": "Battlefields",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The category name", max_length=255),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="PathPosition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "required_points",
                    models.PositiveIntegerField(
                        help_text="Points required to reach this position"
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order of this position on the path (lower numbers come first)",
                    ),
                ),
            ],
            options={
                "ordering": ["terrain", "order"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("point_value", models.PositiveIntegerField(default=1)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TerrainType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "identifier",
                    models.SlugField(
                        help_text="Unique identifier to load the correct styling in Next.js (e.g., 'mountain', 'ocean')",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("taggit.tag",),
        ),
        migrations.CreateModel(
            name="ArticleIndexPage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "ArticleIndex",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="ArticlePage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        blank=True, null=True, verbose_name="Intro"
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("h1", wagtail.blocks.CharBlock()),
                            ("h2", wagtail.blocks.CharBlock()),
                            (
                                "paragraph",
                                wagtail_footnotes.blocks.RichTextBlockWithFootnotes(
                                    features=[
                                        "h1",
                                        "h2",
                                        "h3",
                                        "h4",
                                        "bold",
                                        "underscore",
                                        "italic",
                                        "link",
                                        "footnotes",
                                    ]
                                ),
                            ),
                            (
                                "image_text",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "reverse",
                                            wagtail.blocks.BooleanBlock(required=False),
                                        ),
                                        ("text", wagtail.blocks.RichTextBlock()),
                                        (
                                            "image",
                                            main.blocks.blocks.CustomImageChooserBlock(),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "image_carousel",
                                wagtail.blocks.ListBlock(
                                    main.blocks.blocks.CustomImageChooserBlock()
                                ),
                            ),
                            (
                                "thumbnail_gallery",
                                wagtail.blocks.ListBlock(
                                    main.blocks.blocks.CustomImageChooserBlock()
                                ),
                            ),
                            (
                                "feature_block",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                help_text="Title of the feature section",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "description",
                                            wagtail.blocks.TextBlock(
                                                help_text="Short description",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image",
                                            main.blocks.blocks.CustomImageChooserBlock(
                                                help_text="Feature image",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="Text for the button",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_url",
                                            wagtail.blocks.URLBlock(
                                                help_text="Link for the button",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "background_color",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("white", "White"),
                                                    ("gray", "Gray"),
                                                    ("blue", "Blue"),
                                                    ("custom", "Custom"),
                                                ],
                                                help_text="Choose a background color",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "custom_bg_color",
                                            wagtail.blocks.CharBlock(
                                                help_text="Enter a custom hex color (e.g., #ff5733) if 'Custom' is selected",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "text_alignment",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("left", "Left"),
                                                    ("center", "Center"),
                                                    ("right", "Right"),
                                                ],
                                                help_text="Choose text alignment",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_position",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("inline", "Inline with text"),
                                                    ("below", "Below text"),
                                                ],
                                                help_text="Choose button placement",
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        default=list,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("fr", "French"),
                            ("he", "Hebrew"),
                            ("de", "German"),
                            ("jp", "Japanese"),
                        ],
                        default="en",
                        max_length=10,
                    ),
                ),
                (
                    "post_date",
                    models.DateTimeField(
                        default=datetime.datetime.today, verbose_name="Article date"
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="AuthorPage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Author",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="AuthorsPage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Authors",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="BattlePage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
                ("description", wagtail.fields.RichTextField()),
                ("point_value", models.PositiveIntegerField()),
                (
                    "recommended_frequency",
                    models.PositiveIntegerField(help_text="Recommended times per day"),
                ),
            ],
            options={
                "verbose_name": "Battle",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="CategoriesPage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Describe the page, briefly"
                    ),
                ),
                (
                    "post_date",
                    models.DateTimeField(
                        default=datetime.datetime.today, verbose_name="Article date"
                    ),
                ),
                (
                    "sidebar_title",
                    models.TextField(blank=True, help_text="Categories, Tags, etc'"),
                ),
                (
                    "sidebar_extend_btn",
                    models.TextField(
                        blank=True,
                        help_text="Add text to extend the sidebar, ex: View More",
                    ),
                ),
                (
                    "sidebar_collapse_btn",
                    models.TextField(
                        blank=True,
                        help_text="Add text to collapse the sidebar, ex: Show Less",
                    ),
                ),
            ],
            options={
                "verbose_name": "Categories",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "basepage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="main.basepage",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        blank=True, null=True, verbose_name="Intro"
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "hero",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading",
                                            wagtail.blocks.CharBlock(
                                                required=False, verbose_name="Heading"
                                            ),
                                        ),
                                        (
                                            "sub_heading",
                                            wagtail.blocks.CharBlock(
                                                required=False,
                                                verbose_name="Sub heading",
                                            ),
                                        ),
                                        (
                                            "intro",
                                            wagtail.blocks.RichTextBlock(
                                                features=["bold", "italic", "link"],
                                                required=False,
                                                verbose_name="Intro",
                                            ),
                                        ),
                                        (
                                            "icon",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "icon_name",
                                                        wagtail.blocks.CharBlock(
                                                            help_text="Enter icon name (e.g., rocket, home, star)",
                                                            required=True,
                                                        ),
                                                    ),
                                                    (
                                                        "library",
                                                        wagtail.blocks.ChoiceBlock(
                                                            choices=[
                                                                ("fa", "FontAwesome"),
                                                                ("hero", "Heroicons"),
                                                                (
                                                                    "material",
                                                                    "Material Icons",
                                                                ),
                                                            ],
                                                            help_text="Select the icon library",
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                                verbose_name="Icon",
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "headline",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading",
                                            wagtail.blocks.CharBlock(max_length=255),
                                        ),
                                        (
                                            "sub_heading",
                                            wagtail.blocks.TextBlock(required=False),
                                        ),
                                        (
                                            "intro",
                                            wagtail.blocks.TextBlock(required=False),
                                        ),
                                        (
                                            "cta",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "text",
                                                        wagtail.blocks.CharBlock(
                                                            label="CTA text",
                                                            max_length=255,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "cta_page",
                                                        wagtail.blocks.PageChooserBlock(
                                                            label="CTA page",
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "cta_url",
                                                        wagtail.blocks.URLBlock(
                                                            label="CTA URL",
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "icon",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "icon_name",
                                                        wagtail.blocks.CharBlock(
                                                            help_text="Enter icon name (e.g., rocket, home, star)",
                                                            required=True,
                                                        ),
                                                    ),
                                                    (
                                                        "library",
                                                        wagtail.blocks.ChoiceBlock(
                                                            choices=[
                                                                ("fa", "FontAwesome"),
                                                                ("hero", "Heroicons"),
                                                                (
                                                                    "material",
                                                                    "Material Icons",
                                                                ),
                                                            ],
                                                            help_text="Select the icon library",
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "dark_background",
                                            wagtail.blocks.BooleanBlock(
                                                default=False, required=False
                                            ),
                                        ),
                                    ],
                                    required=False,
                                ),
                            ),
                            (
                                "highlight",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading",
                                            wagtail.blocks.CharBlock(
                                                help_text="Heading of the highlighted section",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "description",
                                            wagtail.blocks.TextBlock(
                                                help_text="Short descriptive text",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "image",
                                            main.blocks.blocks.CustomImageChooserBlock(
                                                help_text="Optional teaser image",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image_on_right",
                                            wagtail.blocks.BooleanBlock(
                                                default=False, required=False
                                            ),
                                        ),
                                        (
                                            "cta",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "text",
                                                        wagtail.blocks.CharBlock(
                                                            label="CTA text",
                                                            max_length=255,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "cta_page",
                                                        wagtail.blocks.PageChooserBlock(
                                                            label="CTA page",
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "cta_url",
                                                        wagtail.blocks.URLBlock(
                                                            label="CTA URL",
                                                            required=False,
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    required=False,
                                ),
                            ),
                            (
                                "teaser",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                help_text="Teaser title", required=True
                                            ),
                                        ),
                                        (
                                            "subtitle",
                                            wagtail.blocks.CharBlock(
                                                help_text="Teaser subtitle",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image",
                                            main.blocks.blocks.CustomImageChooserBlock(
                                                help_text="Optional teaser image",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "link",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional link for more details",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    required=False,
                                ),
                            ),
                            (
                                "standalone_cta",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "cta",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "text",
                                                        wagtail.blocks.CharBlock(
                                                            label="CTA text",
                                                            max_length=255,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "cta_page",
                                                        wagtail.blocks.PageChooserBlock(
                                                            label="CTA page",
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "cta_url",
                                                        wagtail.blocks.URLBlock(
                                                            label="CTA URL",
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                        (
                                            "description",
                                            wagtail.blocks.TextBlock(
                                                label="Short description",
                                                max_length=100,
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button_style",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("primary", "Primary Button"),
                                                    ("secondary", "Secondary Button"),
                                                    ("outline", "Outline Button"),
                                                ],
                                                help_text="Style of the CTA button",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    required=False,
                                ),
                            ),
                            (
                                "icon_bullets",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "icon_bullets",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "icon",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "icon_name",
                                                                        wagtail.blocks.CharBlock(
                                                                            help_text="Enter icon name (e.g., rocket, home, star)",
                                                                            required=True,
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "library",
                                                                        wagtail.blocks.ChoiceBlock(
                                                                            choices=[
                                                                                (
                                                                                    "fa",
                                                                                    "FontAwesome",
                                                                                ),
                                                                                (
                                                                                    "hero",
                                                                                    "Heroicons",
                                                                                ),
                                                                                (
                                                                                    "material",
                                                                                    "Material Icons",
                                                                                ),
                                                                            ],
                                                                            help_text="Select the icon library",
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                        (
                                                            "heading",
                                                            wagtail.blocks.CharBlock(
                                                                max_length=255
                                                            ),
                                                        ),
                                                        (
                                                            "description",
                                                            wagtail.blocks.RichTextBlock(
                                                                features=[
                                                                    "bold",
                                                                    "italic",
                                                                    "link",
                                                                ],
                                                                required=False,
                                                            ),
                                                        ),
                                                        (
                                                            "cta",
                                                            wagtail.blocks.StructBlock(
                                                                [
                                                                    (
                                                                        "text",
                                                                        wagtail.blocks.CharBlock(
                                                                            label="CTA text",
                                                                            max_length=255,
                                                                            required=False,
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "cta_page",
                                                                        wagtail.blocks.PageChooserBlock(
                                                                            label="CTA page",
                                                                            required=False,
                                                                        ),
                                                                    ),
                                                                    (
                                                                        "cta_url",
                                                                        wagtail.blocks.URLBlock(
                                                                            label="CTA URL",
                                                                            required=False,
                                                                        ),
                                                                    ),
                                                                ]
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        )
                                    ],
                                    icon="rectangle-list",
                                ),
                            ),
                            (
                                "logos",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "logos",
                                            wagtail.blocks.ListBlock(
                                                main.blocks.blocks.CustomImageChooserBlock(),
                                                help_text="List of logos to display",
                                            ),
                                        )
                                    ],
                                    required=False,
                                ),
                            ),
                            (
                                "video",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading",
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            "video",
                                            wagtailmedia.blocks.VideoChooserBlock(
                                                required=False
                                            ),
                                        ),
                                        (
                                            "embed",
                                            wagtail.embeds.blocks.EmbedBlock(
                                                required=False
                                            ),
                                        ),
                                    ],
                                    required=False,
                                ),
                            ),
                        ]
                    ),
                ),
            ],
            options={
                "verbose_name": "Home",
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "main.basepage",
            ),
        ),
        migrations.CreateModel(
            name="BattlePageTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("assigned_date", models.DateTimeField(auto_now_add=True)),
                (
                    "assigned_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_battle_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="main.task"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="battle_tasks",
                        to="main.battlepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BattleTaskCompletion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("completed_date", models.DateTimeField(auto_now_add=True)),
                (
                    "battle_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="completions",
                        to="main.battlepagetask",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BattlefieldPathPosition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "battlefield",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="battlefield_path_positions",
                        to="main.battlefield",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.pathposition",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Progress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("points_earned", models.PositiveIntegerField(default=0)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "current_position",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_progresses",
                        to="main.pathposition",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SupportMessage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this message will be visible to all users",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_support_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="pathposition",
            name="terrain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="positions",
                to="main.terraintype",
            ),
        ),
        migrations.AddField(
            model_name="battlefield",
            name="terrain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="battlefields",
                to="main.terraintype",
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("fighter", "Fighter"), ("toolholder", "Tool Holder")],
                        default="fighter",
                        help_text="Role in the rehabilitation game",
                        max_length=20,
                    ),
                ),
                (
                    "total_points",
                    models.PositiveIntegerField(
                        default=0, help_text="Total points earned"
                    ),
                ),
                (
                    "battles_completed",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of completed battles"
                    ),
                ),
                (
                    "current_streak",
                    models.PositiveIntegerField(
                        default=0, help_text="Current consecutive days active"
                    ),
                ),
                (
                    "longest_streak",
                    models.PositiveIntegerField(
                        default=0, help_text="Longest consecutive days active"
                    ),
                ),
                (
                    "last_active",
                    models.DateField(
                        blank=True, help_text="Last date user was active", null=True
                    ),
                ),
                (
                    "supported_fighters",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Fighters this ToolHolder is supporting (only relevant for ToolHolder role)",
                        related_name="supporting_toolholders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="game_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="ArticlePageTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="main.articlepage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="articlepage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="main.ArticlePageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="BattlePageSupportMessage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "support_message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.supportmessage",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="battle_support_messages",
                        to="main.battlepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BattlePageProgress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "progress",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="main.progress"
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="battle_progress",
                        to="main.battlepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BattlePageAchievement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.achievement",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="battle_achievements",
                        to="main.battlepage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="battlepage",
            name="battlefield",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="battle_pages",
                to="main.battlefield",
            ),
        ),
        migrations.CreateModel(
            name="ArticlePageCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_pages",
                        to="main.category",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="categories",
                        to="main.articlepage",
                    ),
                ),
            ],
            options={
                "unique_together": {("page", "category")},
            },
        ),
    ]
